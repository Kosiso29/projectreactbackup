{"version":3,"sources":["Components/Navbar.js","Components/Calender.js","Pages/Home.js","Pages/Products.js","Pages/Reports.js","Pages/Pharmacy.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","useState","bgColor1","bgColor2","bgColor3","bgColor4","sidebar","setSidebar","className","to","onClick","src","process","ReactCalendar","Date","date","setDate","showFixedNumberOfWeeks","onChange","value","Home","Products","Reports","Pharmacy","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAyGeA,MAhGf,WAAmB,IAAD,EAEgBC,mBAAS,CACnCC,SAAW,UACXC,SAAW,GACXC,SAAW,GACXC,SAAW,KAND,mBAEPC,EAFO,KAEEC,EAFF,KAkCd,OACI,oCAOQ,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,kBACV,wBAAwDA,UAAU,WAAlE,YAMA,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAWF,EAAQJ,SAAUQ,QA1C7C,kBAAMH,EAAW,CAClCL,SAAW,UACXC,SAAW,GACXC,SAAW,GACXC,SAAW,OAwCa,yBAAKM,IAAKC,0CACV,wCAGR,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAWF,EAAQH,SAAUO,QA3CrD,kBAAMH,EAAW,CAClCL,SAAW,GACXC,SAAW,UACXC,SAAW,GACXC,SAAW,OAyCa,yBAAKM,IAAKC,0CACV,4CAGR,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAWF,EAAQF,SAAUM,QA5ClD,kBAAMH,EAAW,CAClCL,SAAW,GACXC,SAAW,GACXC,SAAW,UACXC,SAAW,OA0Ca,yBAAKM,IAAKC,0CACV,yCAGR,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAWF,EAAQD,SAAUK,QA7CrD,kBAAMH,EAAW,CAClCL,SAAW,GACXC,SAAW,GACXC,SAAW,GACXC,SAAW,cA2Ca,yBAAKM,IAAKC,0CACV,iD,eC9DjBC,G,MAjBO,WAAO,IAAD,EACFZ,mBAAS,IAAIa,MADX,mBACnBC,EADmB,KACbC,EADa,KAO1B,OACE,6BAEE,kBAAC,IAAD,CAAUC,wBAAsB,EAACC,SAPpB,SAAAH,GACfC,EAAQD,IAM+CI,MAAOJ,OC8BnDK,MA1Cf,WACI,OACI,oCACI,6BACI,yBAAKZ,UAAU,QACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,YACX,yBAAKG,IAAKC,yCACV,kCAAW,wCAGf,yBAAKJ,UAAU,YACX,yBAAKG,IAAKC,wCACV,kCAAW,sCAEf,yBAAKJ,UAAU,YACX,yBAAKG,IAAKC,wCACV,kCAAW,uCAEf,yBAAKJ,UAAU,YACX,yBAAKG,IAAKC,wCACV,kCAAW,8CAEf,yBAAKJ,UAAU,cACX,4CAAqB,6BAEzB,yBAAKA,UAAU,mBACX,6CAAsB,iCCtB/Ba,MARf,WACI,OACI,yBAAKb,UAAU,YACX,0CCKGc,MARf,WACI,OACI,yBAAKd,UAAU,WACX,uCCKGe,MARf,WACI,OACI,yBAAKf,UAAU,YACX,0CCkCGgB,MA9Bf,WAEE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAME,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,GAC3B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GACxB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,GAC3B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,OAAK,EAACD,KAAK,IAChB,kBAAC,EAAD,WCnBQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.895581d9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport { Link } from 'react-router-dom';\r\n//import { SidebarData } from './SidebarData';\r\nimport './Navbar.css';\r\nimport { IconContext } from 'react-icons/io';\r\n//import Ellipse1 from '../assets/img/Ellipse1.png';\r\n\r\nfunction Navbar() {\r\n\r\n    const [sidebar, setSidebar] = useState({\r\n        bgColor1 : \"clicked\",\r\n        bgColor2 : \"\",\r\n        bgColor3 : \"\",\r\n        bgColor4 : \"\"\r\n    });\r\n\r\n    const showSidebar1 = () => setSidebar({\r\n        bgColor1 : \"clicked\",\r\n        bgColor2 : \"\",\r\n        bgColor3 : \"\",\r\n        bgColor4 : \"\"\r\n    });\r\n    const showSidebar2 = () => setSidebar({\r\n        bgColor1 : \"\",\r\n        bgColor2 : \"clicked\",\r\n        bgColor3 : \"\",\r\n        bgColor4 : \"\"\r\n    });\r\n    const showSidebar3 = () => setSidebar({\r\n        bgColor1 : \"\",\r\n        bgColor2 : \"\",\r\n        bgColor3 : \"clicked\",\r\n        bgColor4 : \"\"\r\n    });\r\n    const showSidebar4 = () => setSidebar({\r\n        bgColor1 : \"\",\r\n        bgColor2 : \"\",\r\n        bgColor3 : \"\",\r\n        bgColor4 : \"clicked\"\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {/*<IconContext.Provider value={{color: '#fff'}}>\r\n                {/* <div className='navbar'>\r\n                    <Link to='#' className='menu-bars'>\r\n                        <FaIcons.FaBars onClick={showSidebar}/>\r\n                    </Link>\r\n                </div> */}\r\n                <nav className='nav-menu active' /*className={sidebar ? 'nav-menu active' : 'nav-menu'}*/>\r\n                    <ul className=\"nav-menu-items\">\r\n                        <li /*className='navbar-toggle' onClick={showSidebar}*/ className='roseFam'>\r\n                            Rose Fam\r\n                            {/* <Link to='#' className='menu-bars'>\r\n                                <AiIcons.AiOutlineClose />\r\n                            </Link> */}\r\n                        </li>\r\n                        <li className='nav-text'>\r\n                            <Link to='/' className={sidebar.bgColor1} onClick={showSidebar1}>\r\n                                {/* {item.icon} */}\r\n                                <img src={process.env.PUBLIC_URL + \"/assets/img/Ellipse1.png\"} />\r\n                                <span>Home</span>\r\n                            </Link>\r\n                        </li>\r\n                        <li className='nav-text'>\r\n                            <Link to='/patients' className={sidebar.bgColor2} onClick={showSidebar2}>\r\n                                {/* {item.icon} */}\r\n                                <img src={process.env.PUBLIC_URL + \"/assets/img/Ellipse1.png\"} />\r\n                                <span>Patients</span>\r\n                            </Link>\r\n                        </li>\r\n                        <li className='nav-text'>\r\n                            <Link to='/staff' className={sidebar.bgColor3} onClick={showSidebar3}>\r\n                                {/* {item.icon} */}\r\n                                <img src={process.env.PUBLIC_URL + \"/assets/img/Ellipse1.png\"} />\r\n                                <span>Staff</span>\r\n                            </Link>\r\n                        </li>\r\n                        <li className='nav-text'>\r\n                            <Link to='/pharmacy' className={sidebar.bgColor4} onClick={showSidebar4}>\r\n                                {/* {item.icon} */}\r\n                                <img src={process.env.PUBLIC_URL + \"/assets/img/Ellipse1.png\"} />\r\n                                <span>Pharmarcy</span>\r\n                            </Link>\r\n                        </li>\r\n                        {/* {SidebarData.map((item, index) => {\r\n                            return (\r\n                                <li id={index} key={index} className={item.cName} onClick={reply_click(index)}>\r\n                                    <Link to={item.path}>\r\n                                        {/* {item.icon} */}\r\n                                       {/*</ul> <img src={Ellipse1} />\r\n                                        <span>{item.title}</span>\r\n                                    </Link>\r\n                                </li>\r\n                            )\r\n                        })} */}\r\n                    </ul>\r\n                </nav>\r\n            {/*</IconContext.Provider>*/}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { useState } from \"react\";\r\n//import { render } from \"react-dom\";\r\nimport Calendar from \"react-calendar\";\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nconst ReactCalendar = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const onChange = date => {\r\n    setDate(date);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Calendar showWeekNumbers onChange={onChange} value={date} /> */}\r\n      <Calendar showFixedNumberOfWeeks onChange={onChange} value={date} />\r\n      {/* {console.log(date)}\r\n      {date.toString()} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactCalendar;","import React from 'react';\r\nimport ReactCalendar from '../Components/Calender';\r\n\r\nfunction Home() {\r\n    return(\r\n        <>\r\n            <div>\r\n                <div className='home'>\r\n                    <div className='cardCalender'>\r\n                        <ReactCalendar />\r\n                    </div>\r\n                    <div className='cardStat'>\r\n                        <img src={process.env.PUBLIC_URL + \"/assets/img/patient.png\"} />\r\n                        <h4>45</h4><p>Patients</p>\r\n                        \r\n                    </div>\r\n                    <div className='cardStat'>\r\n                        <img src={process.env.PUBLIC_URL + \"/assets/img/doctor.png\"} />\r\n                        <h4>15</h4><p>Nurses</p>\r\n                    </div>\r\n                    <div className='cardStat'>\r\n                        <img src={process.env.PUBLIC_URL + \"/assets/img/doctor.png\"} />\r\n                        <h4>15</h4><p>Doctors</p>\r\n                    </div>\r\n                    <div className='cardStat'>\r\n                        <img src={process.env.PUBLIC_URL + \"/assets/img/visits.png\"} />\r\n                        <h4>17</h4><p>Average Visits</p>\r\n                    </div>\r\n                    <div className='cardBottom'>\r\n                        <h4>Appointments</h4><p></p>\r\n                    </div>\r\n                    <div className='cardBottomRight'>\r\n                        <h4>Recent Visits</h4><p></p>\r\n                        {/* <ReactCalendar /> */}\r\n                    </div>\r\n                    {/* <div className='cardStat'>\r\n                        Calender\r\n                    </div> */}\r\n                    {/* <h1>Home</h1> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Products() {\r\n    return(\r\n        <div className='products'>\r\n            <h1>Patients</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Products;","import React from 'react';\r\n\r\nfunction Reports() {\r\n    return(\r\n        <div className='reports'>\r\n            <h1>Staff</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reports;","import React from 'react';\r\n\r\nfunction Pharmacy() {\r\n    return(\r\n        <div className='pharmacy'>\r\n            <h1>Pharmacy</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pharmacy;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './Components/Navbar';\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Home from './Pages/Home';\r\nimport Products from './Pages/Products';\r\nimport Reports from './Pages/Reports';\r\nimport Pharmacy from './Pages/Pharmacy';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          {/* <Route path='/' exact component={Home} />\r\n          <Route path='/patients' exact component={Products} />\r\n          <Route path='/staff' exact component={Reports} />\r\n          <Route path='/pharmacy' exact component={Pharmacy} /> */}\r\n          \r\n          <Route path=\"/patients\" exact>\r\n            <Products />\r\n          </Route>\r\n          <Route path=\"/staff\" exact>\r\n            <Reports />\r\n          </Route>\r\n          <Route path=\"/pharmacy\" exact>\r\n            <Pharmacy />\r\n          </Route>\r\n          <Route exact path=\"\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}